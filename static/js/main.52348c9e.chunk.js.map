{"version":3,"sources":["SortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["mergeSort","array","animations","length","auxilaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","animation","comparison","swap","push","doMerge","SortingVisualizer","props","state","this","resetArray","x","randomIntFromInterval","setState","sortingAlgorithms","newAnimations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newWidth","width","javaScriptSortedArray","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","className","onClick","HeapSort","BubbleSort","QuickSort","map","value","idx","key","React","Component","min","max","random","array1","array2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52348c9e.chunk.js","sourcesContent":["//export const MergeSort = array => {\r\n//    if (array.length === 1) return array;\r\n//    const middleIdx = Math.floor(array.length / 2);\r\n//    const firstHalf = MergeSort(array.slice(0,middleIdx));\r\n//    const secondHalf = MergeSort(array.slice(middleIdx));\r\n//    const sortedArray = [];\r\n//    let i = 0, j = 0;\r\n//    while (i<firstHalf.length && j <secondHalf.length) {\r\n//        if (firstHalf[i] < secondHalf[j]){\r\n//            sortedArray.push(firstHalf[i++]);\r\n//        }\r\n//        else {\r\n//            sortedArray.push(secondHalf[j++]);\r\n//       }\r\n//    }\r\n//    while (i<firstHalf.length) sortedArray.push(firstHalf[i++]);\r\n//    while (j<secondHalf.length) sortedArray.push(secondHalf[j++]);\r\n//   return sortedArray;\r\n//}\r\n\r\nexport function mergeSort(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxilaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxilaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxilaryArray, animations) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxilaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxilaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxilaryArray, animations);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxilaryArray, animations) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        const animation = {};\r\n        animation.comparison = [i, j];\r\n        if (auxilaryArray[i] <= auxilaryArray[j]) {\r\n            animation.swap = [k, auxilaryArray[i]];\r\n            mainArray[k++] = auxilaryArray[i++];\r\n        } else{\r\n            animation.swap = [k, auxilaryArray[j]];\r\n            mainArray[k++] = auxilaryArray[j++];\r\n        }\r\n        animations.push(animation)\r\n    }\r\n    while(i <= middleIdx){\r\n        animations.push({\r\n            comparison: [i, i],\r\n            swap: [k, auxilaryArray[i]]\r\n        });\r\n        mainArray[k++] = auxilaryArray[i++];\r\n    }\r\n    while(j <= endIdx){\r\n        animations.push({\r\n            comparison: [j, j],\r\n            swap: [k, auxilaryArray[j]]\r\n        });\r\n        mainArray[k++] = auxilaryArray[j++];\r\n    }\r\n}","import React from \"react\";\r\nimport * as sortingAlgorithms from '../SortingAlgorithms/sortingAlgorithms.js';\r\nimport \"./SortingVisualizer.css\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let x = 0; x < 125; x++) {\r\n      array.push(randomIntFromInterval(5, 1800));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSort(){\r\n    const animations = sortingAlgorithms.mergeSort(this.state.array);\r\n    const newAnimations = [];\r\n    for ( const animation of animations) {\r\n      newAnimations.push(animation.comparison);\r\n      newAnimations.push(animation.comparison);\r\n      newAnimations.push(animation.swap);\r\n    }\r\n    for (let i = 0; i < newAnimations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if(isColorChange){\r\n        const [barOneIdx, barTwoIdx] = newAnimations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? 'red' : 'black';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 3);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newWidth] = newAnimations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.width = `${newWidth}px`;\r\n\r\n        }, i * 3)\r\n      }\r\n    }\r\n  }\r\n\r\n  HeapSort(){}\r\n  BubbleSort(){}\r\n  QuickSort(){}\r\n\r\n  testSortingAlgorithms(){\r\n    for (let i = 0; i < 100; i++){\r\n      const array = [];\r\n      const length = randomIntFromInterval(1,1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000,1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a,b) => a - b);\r\n      const mergeSortedArray = sortingAlgorithms.mergeSort(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        <button onClick={() => this.resetArray()}> Generate New Array</button>\r\n        <button onClick={() => this.mergeSort()}> Merge Sort</button>\r\n        <button onClick={() => this.HeapSort()}> Heap Sort</button>\r\n        <button onClick={() => this.BubbleSort()}> Bubble Sort</button>\r\n        <button onClick={() => this.QuickSort()}> Quick Sort</button>\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{width: `${value}px` }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(array1, array2){\r\n  if (array1.length !== array2.length) return false;\r\n  for (let i = 0; i < array1.length; i++){\r\n    if (array1[i] !== array2[i]) return false;\r\n  }\r\n  return true;\r\n}\r\n","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer> </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}